{"version":3,"sources":["BooksAPI.js","BookUtility.js","components/Changer.js","components/Book.js","components/BookShelf.js","components/BookCase.js","components/Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","sortAllBooks","list","sort","a","b","titleA","title","toUpperCase","titleB","mergeShelfSearch","hashTable","forEach","Changer","state","shelfSelection","_this","props","onSwitchShelf","setState","componentWillReceiveProps","_this2","this","react_default","createElement","className","value","onChange","e","target","disabled","Component","Book","authors","join","url","imageLinks","thumbnail","onClick","style","width","height","backgroundImage","components_Changer","BookShelf","name","map","key","components_Book","BookCase","componentDidMount","onRefreshAllBooks","updateShelfStatus","filter","shelves","length","components_BookShelf","Link","to","Search","queryTimer","newQuery","clearTimeout","setTimeout","renewSearch","BooksAPI","response","updatedList","updatedError","undefined","error","BookUtility","selectedBooks","componentRecievesProps","type","placeholder","BooksApp","showSearchPage","newBook","refreshAllBooks","switchShelf","slice","listbook","push","Route","exact","path","render","components_BookCase","components_Search","React","ReactDOM","HashRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6b1abe46.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","export const sortAllBooks = (list) =>{\n  //Take in, sort and return the list of books\n  const newList = list.sort(function(a ,b){\n\n    const titleA = a\n    .title\n    .toUpperCase();\n\n    const titleB = b\n    .title\n    .toUpperCase();\n\n    if(titleA < titleB){\n      return -1;}\n\n    if (titleA > titleB){\n      return 1;\n    }\n\n    return 0;\n    })\n\n    return newList;\n  }\n\n  export const mergeShelfSearch = (shelf, search) => {\n    //Check all the books in the search results to see if already on the shelf\n    const hashTable = {};\n    shelf.forEach(book => hashTable[book.id] = book.shelf);\n\n    search.forEach(book => {\n      book.shelf = hashTable[book.id] || 'none';\n    });\n\n    return search;\n  }\n\n  // Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)","import React, { Component } from 'react';\n// import * as BooksAPI from './BooksAPI'\n\nclass Changer extends Component{\n  state = {\n    shelfSelection: this.props.book.shelf || \"none\"\n  };\n\nonSwitchShelf = (book, shelf) => {\n  //Changes the state for the change of shelf and sends call back.\n  this.setState({\n    shelfSelection: shelf\n  });\n  this.props.onSwitchShelf(book,shelf);\n};\n\ncomponentWillReceiveProps = props => {\n  this.props = props;\n  this.setState({\n    shelfSelection: this.props.book.shelf\n  });\n};\n\n  render(){\n    return(\n      <div className=\"book-shelf-changer\">\n        <select\n          value={this.state.shelfSelection}\n          onChange={e => this.onSwitchShelf(this.props.book, e.target.value)}>\n          <option value=\"move\" disabled>\n            Move to...\n          </option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Changer;\n\n// Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)\n","import React, {Component} from 'react'\n// import * as BooksAPI from './BooksAPI'\nimport Changer from './Changer';\n\nclass Book extends Component{\n  state ={\n    shelfSelection: this.props.book.shelf || 'none'\n\n  }\n  render (){\n    //If there is more than one author in the array join them to one string\n    const authors = this.props.book.authors && this\n      .props.book.authors.join(' | ');\n\n    //Create the thumbnail URL\n     let url = (this.props.book.imageLinks\n      && `url(${this.props.book.imageLinks.thumbnail})`);\n\n    return(\n        <div className=\"book\">\n          <div className=\"book-top\">\n          <button\n            className=\"book-cover-button\"\n            onClick={(e) => this.props(e,\n              this.props.book)}>\n            <div className=\"book-cover\" style={{\n              width: 128,\n              height: 193,\n              backgroundImage: url\n              }}></div>\n          </button>\n\n            <Changer\n            book={this.props.book}\n            onSwitchShelf={this.props.onSwitchShelf}/>\n          </div>\n          <div className=\"book-title\">{this.props.book.title}</div>\n          <div className=\"book-authors\">{authors}</div>\n        </div>\n    )\n  }\n}\n\nexport default Book;\n\n// Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)\n\n\n","import React, {Component} from 'react'\n// import * as BooksAPI from './BooksAPI'\nimport Book from './Book';\n\nclass BookShelf extends Component{\n  state = {\n  }\n\n  render(){\n\n\n    return (\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{this.props.shelf.name}</h2>\n        <div className=\"bookshelf-books\">\n          <ol className=\"books-grid\">\n          {this\n            .props\n            .shelf\n            .books\n            .map(book =>(\n              <li key={book.id}>\n              <Book\n                book={book}\n                onSwitchShelf={this.props.onSwitchShelf}/>\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BookShelf;\n\n// Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)\n\n","import React, { Component } from 'react';\n// import * as BooksAPI from './BooksAPI'\nimport { Link } from 'react-router-dom';\nimport BookShelf from './BookShelf';\n\n\nclass BookCase extends Component {\n  state = {};\n\n  componentDidMount = () =>{\n    //Updates list of allthe books\n    this.props.onRefreshAllBooks();\n  };\n\n  updateShelfStatus = () =>{\n    //Updates state of the shelves to show the correct books.\n\n    const newCurrentlyReading = {\n      name: \"Currently Reading\",\n      books: this.props.books.filter(book => book.shelf === \"currentlyReading\")\n    };\n    const newWantToRead ={\n      name: \"Want to Read\",\n      books: this.props.books.filter(book => book.shelf === \"wantToRead\")\n    };\n    const newRead ={\n      name: \"Read\",\n      books: this.props.books.filter(book => book.shelf === \"read\")\n    };\n    return [newCurrentlyReading, newWantToRead, newRead];\n  };\n\n  render(){\n  //nullcheck to see\n  //how many books you have it will update the shelves\n  let shelves = [];\n  if (this.props.books && this.props.books.length)\n    shelves = this.updateShelfStatus();\n\n  return(\n    <div className=\"app\">\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            {shelves &&\n              shelves.map(shelf => (\n              <BookShelf\n              key={shelf.name}\n              shelf={shelf}\n              onSwitchShelf={this.props.onSwitchShelf} />))}\n            </div>\n            </div>\n          <div className=\"open-search\">\n            <Link to='/search'>Add a Book</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default BookCase;\n\n// Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)\n\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as BooksAPI from \"../BooksAPI\";\nimport * as BookUtility from \"../BookUtility\";\nimport Book from \"./Book\";\n\nclass Search extends Component {\n  state = {\n    query: \"\",\n    books: []\n  };\nqueryTimer = null;\n//update the search and the give a quarter second to display\nnewQuery = value => {\n  clearTimeout(this.queryTimer);\n  this.setState({ query: value });\n  this.queryTimer = setTimeout(this.renewSearch, 250);\n};\n\nrenewSearch = () => {\n  //does not allow empty searches\n  if (this.state.query === \"\") {\n    this.setState({ error: false, books: [] });\n    return;\n  }\n//Search for the query and the yield the response\n  BooksAPI.search(this.state.query).then(response => {\n      let updatedList = [];\n      let updatedError = false;\n      //Check for errors, existing books, make sure a book matches the query\n      if (\n        response === undefined ||\n        (response.error && response.error !== \"empty query\")\n      ) {\n        updatedError = true;\n      } else if (response.length) {\n        //check books already on the shelf vs search results and update shelf\n        updatedList = BookUtility.mergeShelfSearch(\n          this.props.selectedBooks,\n          response\n          );\n        updatedList = BookUtility.sortAllBooks(updatedList);\n      }\n\n      //Set the state based on error response\n      this.setState({ error: updatedError, books: updatedList });\n    });\n  };\n\n//merge shelf - sort the shelf and lists - set the state\n\ncomponentRecievesProps = props => {\n  this.props = props;\n  let updatedList = BookUtility.mergeShelfSearch(\n    this.props.selectedBooks,\n    this.state.books\n    );\n  updatedList = BookUtility.sortAllBooks(updatedList);\n  this.setState({ books: updatedList });\n};\n\n\n  render(){\n    return(\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link className=\"close-search\" to='/'>\n            Close\n          </Link>\n          <div className=\"search-books-input-wrapper\">\n            <input\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n            onChange={e => this.newQuery(e.target.value)}\n            value={this.state.query.value}/>\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n        {this.state.error && (\n          <div className = \"search-error\">\n            'Sorry, there has been an issue with your search. Please search again.'\n          </div>\n          )}\n        {!this.state.error && (\n          <span className ='search-count'>\n            {this.state.books.length}&nbsp; meet your search requirements.\n          </span>\n          )}\n          <ol className=\"books-grid\">\n            {this.state.books &&\n              this.state.books.map(book => (\n                <li key={book.id}>\n                    <Book book={book} onSwitchShelf={this.props.onSwitchShelf}/>\n                  </li>\n                  ))}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n\n// Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport * as BookUtility from \"./BookUtility\";\nimport \"./App.css\";\nimport BookCase from \"./components/BookCase\";\nimport Search from \"./components/Search\";\n\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    showSearchPage: false\n  };\n\n  componentDidMount = () =>{\n    if(this.state.newBook){\n      this.refreshAllBooks();\n    }\n  };\n\n  refreshAllBooks = () => {\n    //takes books on shelf and updates with sorted list.\n    BooksAPI.getAll().then(list => {\n      this.setState({\n        books: BookUtility.sortAllBooks(list),\n        newBook: false\n      });\n    });\n  };\n\n  switchShelf =(book, shelf) => {\n    BooksAPI.update(book, shelf).then(response => {\n      //update the book state, looks at list of books first\n      let updatedList = this.state.books.slice(0);\n\n      //Check list for the book\n      const books = updatedList.filter(listbook => listbook.id === book.id);\n        if (books.length){\n          //Update books that are already on the shelf\n          books[0].shelf = shelf;\n        }else {\n          //sort list of books and add to the shelf\n          updatedList.push(book);\n          updatedList = BookUtility.sortAllBooks(updatedList);\n        }\n        //update the state\n        this.setState({ books: updatedList });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n      <Route\n        exact\n        path='/'\n          render={() => (\n          <BookCase\n          books={this.state.books}\n          onSwitchShelf={this.switchShelf}\n          onRefreshAllBooks ={this.refreshAllBooks}\n          />\n          )}/>\n\n      <Route exact path='/search'\n        render={() => (\n        <Search\n          selectedBooks={this.state.books}\n          onSwitchShelf={this.switchShelf}/>\n          )}/>\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n\n// Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { HashRouter } from 'react-router-dom';\nimport \"./index.css\";\n\nReactDOM.render(\n    <HashRouter>\n        <App/>\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n\n\n// Resources Used\n// Starter Code from Udacity Front-End Nanodegree - https://github.com/udacity/reactnd-project-myreads-starter)\n// Doug Brown's Video Tutorial Part 1 - https://www.youtube.com/watch?v=OcL7-7cRpkQ&feature=youtu.be)"],"sourceRoot":""}